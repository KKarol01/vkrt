#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_buffer_reference : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int32 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable

layout(location = 0) rayPayloadEXT struct RayPayload {
    vec3 radiance;
    float distance;
} payload;

const float PI = 3.1415926535897932;

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0, rgba8) uniform image2D ddgi_radiance_image;
layout(binding = 3, set = 0, rgba8) uniform image2D ddgi_irradiance_image;
layout(binding = 4, set = 0) uniform sampler ddgi_irradiance_sampler;
layout(binding = 14, set = 0) uniform CameraProperties {
    mat4 viewInverse;
    mat4 projInverse;
    mat3 randomRotation;
} cam;
layout(binding = 15, set = 0) uniform sampler2D textures[];

struct Vertex {
    vec3 pos;
    vec3 nor;
    vec2 uv;
};

struct MeshData {
    //uint32_t index_offset;
    //uint32_t vertex_offset;
    uint32_t color_texture;
};

layout(scalar, buffer_reference, buffer_reference_align = 8) readonly buffer VertexBuffer {
    Vertex vertices[]; 
};
layout(scalar, buffer_reference, buffer_reference_align = 8) readonly buffer IndexBuffer {
    uint32_t indices[]; 
};
layout(scalar, buffer_reference, buffer_reference_align = 8) readonly buffer PerTriangleMeshId {
    uint32_t ids[];
};
layout(scalar, buffer_reference, buffer_reference_align = 8) readonly buffer MeshDatasBuffer {
    MeshData mesh_datas[];
};
layout(scalar, buffer_reference, buffer_reference_align = 8) readonly buffer PerTlasTriangleOffsets {
    uint32_t offsets[];
};
layout(scalar, buffer_reference, buffer_reference_align = 8) readonly buffer CombinedRTBuffers {
    PerTriangleMeshId mesh_ids;
    PerTlasTriangleOffsets offsets;
    MeshDatasBuffer meshes;
};

layout(scalar, buffer_reference, buffer_reference_align = 4) readonly buffer DDGIBuffer {
	vec3 probe_start;
	uvec3 probe_counts;
	vec3 probe_walk;
	float min_dist;
	float max_dist;
	float normal_bias;
	uint irr_res;
    uint rays_per_probe;
    uint radiance_tex_idx;
};

layout(scalar, push_constant) uniform Constants {
    CombinedRTBuffers combined_rt_buffs;
    VertexBuffer vertex_buffer;
    IndexBuffer index_buffer;
    DDGIBuffer ddgi;
    uint32_t mode;
};

#include "probes.inc.glsl"

#if 1
const vec4 colors[] = vec4[](
	vec4(0.0, 1.0, 0.0, 1.0),
	vec4(1.0, 0.0, 0.0, 1.0),
	vec4(0.0, 1.0, 0.0, 1.0),
	vec4(1.0, 0.0, 0.0, 1.0),
	vec4(0.0, 1.0, 0.0, 1.0),
	vec4(1.0, 0.0, 0.0, 1.0),
	vec4(0.0, 1.0, 0.0, 1.0),
	vec4(1.0, 0.0, 0.0, 1.0)
);
#endif

vec3 sample_irradiance(vec3 world_pos, vec3 normal, vec3 cam_pos) {
	vec3 V = normalize(cam_pos - world_pos);
	vec3 bias_vec = (normal * 0.2 + V * 0.8) * 0.75;
	vec3 biased_world_pos = world_pos + bias_vec;
	ivec3 grid_indices = world_to_grid_coords(biased_world_pos);
	vec3 grid_pos = grid_coord_to_position(grid_indices);
	vec3 alpha = clamp((biased_world_pos - grid_pos) / ddgi.probe_walk, vec3(0.0), vec3(1.0));

	vec3 irr = vec3(0.0);
	float sum_weight = 0.0;

	//return irr;

#if 1
	for(int i=0; i<8; ++i) {
		ivec3 offset = ivec3(i, i>>1, i>>2) & ivec3(1);

		vec3 trilinear3 = max(vec3(0.001), mix(1.0 - alpha, alpha, vec3(offset)));
		float trilinear = trilinear3.x * trilinear3.y * trilinear3.z;

		ivec3 probe_coord = clamp(grid_indices + offset, ivec3(0), ivec3(ddgi.probe_counts) - 1);
		int probe_idx = get_probe_index_from_grid_coords(probe_coord);
		
		float weight = 1.0;
		weight *= trilinear;

#if 0
		vec3 probe_irr = colors[probe_idx].xyz;
#else
		vec3 probe_irr = textureLod(textures[ddgi.radiance_tex_idx + 1], get_probe_uv(normal, probe_coord), 0).rgb;
		//probe_irr = vec3(get_probe_uv(normal, probe_coord), 0.0);
#endif
		irr += weight * probe_irr;
		sum_weight += weight;

#if 0
		vec3 probe_pos = grid_coord_to_position(probe_coord);
		vec2 uv = get_probe_uv(normal, grid_indices);
		vec3 probe_irr = textureLod(textures[ddgi.radiance_tex_idx + 1], uv, 0).rgb;
        probe_irr = colors[probe_idx].xyz;
		weight *= dot(trilinear, vec3(1.0)) + 0.001;
		irr += weight * probe_irr;
		sum_weight += weight;
#endif
	}
#endif

	return (irr / sum_weight) * 0.5 * PI;
}

void main() {
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin = cam.viewInverse * vec4(0, 0, 0, 1);
    vec4 target = cam.projInverse * vec4(vec3(vec4(d.x, -d.y, 1, 1).xyz), 1.0);
    vec4 direction = cam.viewInverse * vec4(normalize(target.xyz), 0);

    float tmin = 0.00001;
    float tmax = 5.0;

    payload.radiance = vec3(0.0);
    payload.distance = 0.0;

    const uint cull_mask = 0xFF;
    const uint sbtOffset = 3;
    const uint sbtStride = 1;
    const uint missIndex = 1;

    if(mode == 0) {
		traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, cull_mask, sbtOffset, sbtStride, missIndex, origin.xyz, tmin, direction.xyz, tmax, 0);
		vec3 hit_pos = origin.xyz + direction.xyz * payload.distance;
		vec3 irradiance = sample_irradiance(hit_pos, hit_pos, hit_pos);
		//imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(payload.radiancebnbbnmmmmmmm 1.0));
		imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(payload.radiance + irradiance, 1.0)); 
		//imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(irradiance, 1.0)); 
	} else if (mode == 1) {
        const ivec2 pixel_coord = ivec2(gl_LaunchIDEXT.xy); 
        const int probe_idx = pixel_coord.y;
        const int ray_idx = pixel_coord.x;

        ivec3 probe_grid_coords = get_probe_grid_coords(probe_idx);
        vec3 ray_origin = grid_coord_to_position(probe_grid_coords);
        vec3 ray_dir = /*cam.randomRotation **/ sphericalFibonacci(float(ray_idx), float(ddgi.rays_per_probe));

		traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, cull_mask, sbtOffset, sbtStride, missIndex, ray_origin, ddgi.min_dist, ray_dir, ddgi.max_dist, 0);

#if 0
        imageStore(ddgi_radiance_image, pixel_coord, colors[probe_idx]);
#else
        imageStore(ddgi_radiance_image, pixel_coord, vec4(payload.radiance, payload.distance));
#endif
    }
}