#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_buffer_reference : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int32 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable

layout(location = 0) rayPayloadEXT struct RayPayload {
    vec3 radiance;
    float distance;
} payload;

const float PI = 3.1415926535897932;

#include "descriptor_layout.inc"
#include "push_constants.inc"

vec3 sphericalFibonacci(float i, float n) {
    const float PHI = sqrt(5.0) * 0.5 + 0.5;
#   define madfrac(A, B) ((A)*(B)-floor((A)*(B)))
    float phi = 2.0 * PI * madfrac(i, PHI - 1);
    float cosTheta = 1.0 - (2.0 * i + 1.0) * (1.0 / n);
    float sinTheta = sqrt(clamp(1.0 - cosTheta * cosTheta, 0.0, 1.0));

    return vec3(
        cos(phi) * sinTheta,
        sin(phi) * sinTheta,
        cosTheta);

#   undef madfrac
}

vec2 normalToUvRectOct(vec3 normal){
    vec2 p = normal.xy / dot(vec3(1.0), abs(normal));
    
    if(normal.z < 0.0) {
         p.xy = (1.0 - abs(p.yx)) * vec2(normal.x <= 0.0 ? -1 : 1, normal.y <= 0.0 ? -1 : 1);
    }
    
    p = clamp(p, vec2(-1.0), vec2(1.0));
	return (p * 0.5 + 0.5) * float(ddgi.irr_res);
}

vec3 grid_coord_to_position(ivec3 grid_coords) {
    return ddgi.probe_start + vec3(grid_coords) * ddgi.probe_walk;
}

ivec3 get_probe_grid_coords(int probe_id) {
    ivec3 pos;
    pos.x = probe_id & (int(ddgi.probe_counts.x) - 1);
    pos.y = (probe_id & (int(ddgi.probe_counts.x) * int(ddgi.probe_counts.y) - 1)) >> findMSB(ddgi.probe_counts.x);
    pos.z = probe_id >> findMSB(ddgi.probe_counts.x * ddgi.probe_counts.y);
    return pos;
}

void main() {
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin = cam.viewInverse * vec4(0, 0, 0, 1);
    vec4 target = cam.projInverse * vec4(vec3(vec4(d.x, -d.y, 1, 1).xyz), 1.0);
    vec4 direction = cam.viewInverse * vec4(normalize(target.xyz), 0);

    float tmin = 0.00001;
    float tmax = 5.0;

    payload.radiance = vec3(0.0);
    payload.distance = 0.0;

    const uint cull_mask = 0xFF;
    const uint sbtOffset = 3;
    const uint sbtStride = 1;
    const uint missIndex = 1;

    if(mode == 0) {
		traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, cull_mask, sbtOffset, sbtStride, missIndex, origin.xyz, tmin, direction.xyz, tmax, 0);
		imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(payload.radiance, 1.0));
	} else if (mode == 1) {
        const ivec2 pixel_coord = ivec2(gl_LaunchIDEXT.xy); 
        const int probe_idx = pixel_coord.y;
        const int ray_idx = pixel_coord.x;

        ivec3 probe_grid_coords = get_probe_grid_coords(probe_idx);
        vec3 ray_origin = grid_coord_to_position(probe_grid_coords);
        vec3 ray_dir = /*cam.randomRotation **/ sphericalFibonacci(float(ray_idx), float(ddgi.rays_per_probe));

		traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, cull_mask, sbtOffset, sbtStride, missIndex, ray_origin, ddgi.min_dist, ray_dir, ddgi.max_dist, 0);

        imageStore(ddgi_radiance_image, pixel_coord, vec4(payload.radiance, payload.distance));
    }
}