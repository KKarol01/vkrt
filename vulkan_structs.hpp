#pragma once
#include <type_traits>
#include <concepts>
#include <vulkan/vulkan.h>

// clang-format off

template <typename T> struct INIT_VK_STYPE;

#define INIT_VK_EXPAND(x) x
#define INIT_VK_STRUCT_1(name, ...) template <> struct INIT_VK_STYPE<name> {}
#define INIT_VK_STRUCT_2(name, type, ...) template <> struct INIT_VK_STYPE<name> { inline static constexpr VkStructureType sType = type; }
#define INIT_VK_STRUCT_NAME(ARG1, ARG2, NAME, ...) NAME
#define INIT_VK_STRUCT(...) INIT_VK_EXPAND(INIT_VK_STRUCT_NAME(__VA_ARGS__, INIT_VK_STRUCT_2, INIT_VK_STRUCT_1)(__VA_ARGS__))

INIT_VK_STRUCT(VkWin32SurfaceCreateInfoKHR, VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR);
INIT_VK_STRUCT(VkPhysicalDeviceSynchronization2Features, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES);
INIT_VK_STRUCT(VkPhysicalDeviceHostQueryResetFeatures, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES);
INIT_VK_STRUCT(VkPhysicalDeviceDynamicRenderingFeatures, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES);
INIT_VK_STRUCT(VkPhysicalDeviceDescriptorIndexingFeatures, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES);
INIT_VK_STRUCT(VkPhysicalDeviceFeatures2, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2);
INIT_VK_STRUCT(VkImageCreateInfo, VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO);
INIT_VK_STRUCT(VkImageViewCreateInfo, VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO);
INIT_VK_STRUCT(VkBufferCreateInfo, VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO);
INIT_VK_STRUCT(VkCommandPoolCreateInfo, VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO);
INIT_VK_STRUCT(VkCommandBufferAllocateInfo, VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO);
INIT_VK_STRUCT(VkCopyBufferToImageInfo2, VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2);
INIT_VK_STRUCT(VkBufferImageCopy2, VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2);
INIT_VK_STRUCT(VkImageCopy);
INIT_VK_STRUCT(VkImageMemoryBarrier2, VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2);
INIT_VK_STRUCT(VkDependencyInfo, VK_STRUCTURE_TYPE_DEPENDENCY_INFO);
INIT_VK_STRUCT(VkBlitImageInfo2, VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2);
INIT_VK_STRUCT(VkCommandBufferBeginInfo, VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO);
INIT_VK_STRUCT(VkImageBlit2, VK_STRUCTURE_TYPE_IMAGE_BLIT_2);
INIT_VK_STRUCT(VkSubmitInfo2, VK_STRUCTURE_TYPE_SUBMIT_INFO_2);
INIT_VK_STRUCT(VkCommandBufferSubmitInfo, VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO);
INIT_VK_STRUCT(VkBufferDeviceAddressInfo, VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO);
INIT_VK_STRUCT(VkAccelerationStructureGeometryKHR, VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR);
INIT_VK_STRUCT(VkAccelerationStructureGeometryTrianglesDataKHR, VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR);
INIT_VK_STRUCT(VkAccelerationStructureBuildGeometryInfoKHR, VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR);
INIT_VK_STRUCT(VkAccelerationStructureBuildSizesInfoKHR, VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR);
INIT_VK_STRUCT(VkAccelerationStructureCreateInfoKHR, VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR);
INIT_VK_STRUCT(VkAccelerationStructureBuildRangeInfoKHR);
INIT_VK_STRUCT(VkPhysicalDeviceBufferDeviceAddressFeatures, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES);
INIT_VK_STRUCT(VkPhysicalDeviceAccelerationStructureFeaturesKHR, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR);
INIT_VK_STRUCT(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR);
INIT_VK_STRUCT(VkShaderModuleCreateInfo, VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO);
INIT_VK_STRUCT(VkPipelineShaderStageCreateInfo, VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO);
INIT_VK_STRUCT(VkDescriptorPoolCreateInfo, VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO);
INIT_VK_STRUCT(VkDescriptorSetAllocateInfo, VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO);
INIT_VK_STRUCT(VkWriteDescriptorSetAccelerationStructureKHR, VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR);
INIT_VK_STRUCT(VkWriteDescriptorSet, VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET);
INIT_VK_STRUCT(VkSwapchainCreateInfoKHR, VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR);
INIT_VK_STRUCT(VkSemaphoreCreateInfo, VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO);
INIT_VK_STRUCT(VkFenceCreateInfo, VK_STRUCTURE_TYPE_FENCE_CREATE_INFO);
INIT_VK_STRUCT(VkAcquireNextImageInfoKHR, VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR);
INIT_VK_STRUCT(VkSemaphoreSubmitInfo, VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO);
INIT_VK_STRUCT(VkPresentInfoKHR, VK_STRUCTURE_TYPE_PRESENT_INFO_KHR);
INIT_VK_STRUCT(VkAccelerationStructureInstanceKHR);
INIT_VK_STRUCT(VkStridedDeviceAddressRegionKHR);
INIT_VK_STRUCT(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR);
INIT_VK_STRUCT(VkPhysicalDeviceAccelerationStructurePropertiesKHR, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR);
INIT_VK_STRUCT(VkDescriptorSetVariableDescriptorCountAllocateInfo, VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO);
INIT_VK_STRUCT(VkSamplerCreateInfo, VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO);
INIT_VK_STRUCT(VkDescriptorSetLayoutBindingFlagsCreateInfo, VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO);
INIT_VK_STRUCT(VkPhysicalDeviceScalarBlockLayoutFeatures, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES);
INIT_VK_STRUCT(VkPhysicalDeviceMaintenance5FeaturesKHR, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR);
INIT_VK_STRUCT(VkComputePipelineCreateInfo, VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO);
INIT_VK_STRUCT(VkPipelineVertexInputStateCreateInfo, VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO);
INIT_VK_STRUCT(VkPipelineInputAssemblyStateCreateInfo, VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO);
INIT_VK_STRUCT(VkPipelineTessellationStateCreateInfo, VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO);
INIT_VK_STRUCT(VkPipelineViewportStateCreateInfo, VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO);
INIT_VK_STRUCT(VkPipelineRasterizationStateCreateInfo, VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO);
INIT_VK_STRUCT(VkPipelineMultisampleStateCreateInfo, VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO);
INIT_VK_STRUCT(VkPipelineDepthStencilStateCreateInfo, VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO);
INIT_VK_STRUCT(VkPipelineColorBlendStateCreateInfo, VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO);
INIT_VK_STRUCT(VkPipelineDynamicStateCreateInfo, VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO);
INIT_VK_STRUCT(VkGraphicsPipelineCreateInfo, VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO);
INIT_VK_STRUCT(VkPipelineLayoutCreateInfo, VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO);
INIT_VK_STRUCT(VkDescriptorSetLayoutCreateInfo, VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO);
INIT_VK_STRUCT(VkRayTracingPipelineCreateInfoKHR, VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR);
INIT_VK_STRUCT(VkRayTracingShaderGroupCreateInfoKHR, VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR);
INIT_VK_STRUCT(VkPipelineRenderingCreateInfo, VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO);
INIT_VK_STRUCT(VkSemaphoreTypeCreateInfo, VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO);
INIT_VK_STRUCT(VkPhysicalDeviceVulkan12Features, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES);
INIT_VK_STRUCT(VkPhysicalDeviceRayQueryFeaturesKHR, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR);
INIT_VK_STRUCT(VkPhysicalDeviceProperties2, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2);
INIT_VK_STRUCT(VkRenderingAttachmentInfo, VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO);
INIT_VK_STRUCT(VkRenderingInfo, VK_STRUCTURE_TYPE_RENDERING_INFO);
INIT_VK_STRUCT(VkAccelerationStructureGeometryInstancesDataKHR, VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR);
INIT_VK_STRUCT(VkBufferMemoryBarrier2, VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2);

template<typename T> concept INIT_VK_STYPE_EXISTS = requires() {
	INIT_VK_STYPE<T>{};
};
template<typename T> concept INIT_VK_EXISTS_HAS_STYPE_MEMBER = INIT_VK_STYPE_EXISTS<T> && requires(T t) {
	{t.sType} -> std::convertible_to<VkStructureType>;
};
inline auto Vks(INIT_VK_STYPE_EXISTS auto&& vk) { return vk; }
template<INIT_VK_EXISTS_HAS_STYPE_MEMBER T> inline auto Vks(T&& vk) { vk.sType = INIT_VK_STYPE<T>::sType; return vk; }

// clang-format on